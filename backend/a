const express = require("express");
const mongoose = require("mongoose");
const multer = require("multer");
const cors = require("cors");
const path = require("path");

const app = express();

// Middleware
app.use(cors());
app.use(express.json());
app.use("/uploads", express.static(path.join(__dirname, "uploads"))); // Serve uploaded files statically



const FileModel = mongoose.model("File", fileSchema);

// Multer Configuration
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, "./uploads/"); // Files will be stored in the "uploads" folder
  },
  filename: (req, file, cb) => {
    cb(null, Date.now() + "-" + file.originalname); // Unique file name
  },
});

const upload = multer({ storage });

// Routes

// Upload file
app.post("/mentor/material/add", upload.single("file"), async (req, res) => {
  try {
    const { title } = req.body;
    const file = req.file;

    const newFile = new FileModel({
      title,
      file: `/uploads/${file.filename}`, // Save file path to MongoDB
    });

    await newFile.save();
    res.status(201).json("File uploaded successfully");
  } catch (error) {
    res.status(500).json({ error: "Failed to upload file" });
  }
});

// Get all files
app.get("/mentor/material/get", async (req, res) => {
  try {
    const files = await FileModel.find();
    res.status(200).json(files);
  } catch (error) {
    res.status(500).json({ error: "Failed to fetch files" });
  }
});

// Delete file
app.delete("/mentor/material/del/:id", async (req, res) => {
  try {
    await FileModel.findByIdAndDelete(req.params.id);
    res.status(200).json("File deleted successfully");
  } catch (error) {
    res.status(500).json({ error: "Failed to delete file" });
  }
});

// Start Server
app.listen(3000, () => {
  console.log("Server started on http://localhost:3000");
});
